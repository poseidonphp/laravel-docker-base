version: '3.5'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  docker-in-docker:
    driver: ${VOLUMES_DRIVER}

services:
  php:
    build:
      context: ./docker/php
    environment:
      - LARAVEL_ROLE=fpm
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    networks:
      - backend
    depends_on:
      - mysql
      - redis

  php-cron:
     build:
       context: ./docker/php
     environment:
       - LARAVEL_ROLE=cron
     volumes:
       - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
     networks:
       - backend
     depends_on:
       - mysql
       - redis
       - php-queue

# Depends on Laravel Horizon package
  php-queue:
     build:
       context: ./docker/php
     environment:
       - LARAVEL_ROLE=queue
     volumes:
       - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
     networks:
       - backend
     depends_on:
       - mysql
       - redis

## Depends on laravel websockets package
  php-websocket:
     build:
       context: ./docker/php
     environment:
       - LARAVEL_ROLE=websocket
     volumes:
       - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
     networks:
       - backend
     depends_on:
       - mysql
       - redis


  ### NGINX Server #########################################
  nginx:
    build:
      context: ./docker/nginx
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
#      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"       # default: 8080
      - "${NGINX_HOST_HTTPS_PORT}:443"     # default: 4443
    depends_on:
      - php
      - php-websocket
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost"]
      timeout: 45s
      interval: 10s
      retries: 10

  ### MySQL ################################################
  mysql:
    build:
      context: ./docker/mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION:-8.0}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE:-project}
      - MYSQL_USER=${MYSQL_USER:-default}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-secret}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "3308:3306"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 45s
      interval: 10s
      retries: 10

  ### Redis ################################################
  redis:
    build: ./docker/redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 45s
      interval: 10s
      retries: 10

  ### Meili Search #########################################
  meilisearch:
    build:
      context: ./docker/meilisearch
    volumes:
      - ${DATA_PATH_HOST}/meilisearch:/home/meili/meilifiles
    ports:
      - "${MEILI_SEARCH_LOCAL_PORT}:7700"
    environment:
      - MEILI_MASTER_KEY=masterKey
      - MEILI_DB_PATH=./meilifiles
    networks:
      - backend

  ### Mail Hog SMTP Server ##################################
  mailhog:
    image: mailhog/mailhog
    ports:
      - "${MAIL_HOG_UI_PORT}:8025" # default is 8025
      - "${MAIL_HOG_SMTP_PORT}:1025" # default is 1025
    networks:
      - backend
      - frontend
